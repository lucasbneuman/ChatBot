#!/usr/bin/env python3
"""
Script de despliegue para el Agente Inteligente de Lucas Benites
"""

import os
import subprocess
import sys
from pathlib import Path

def check_requirements():
    """Verifica que los archivos necesarios existan"""
    required_files = [
        'app.py',
        'requirements_production.txt',
        'Dockerfile',
        '.env'
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå Archivos faltantes:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print("‚úÖ Todos los archivos necesarios est√°n presentes")
    return True

def check_env_vars():
    """Verifica que las variables de entorno est√©n configuradas"""
    from dotenv import load_dotenv
    load_dotenv()
    
    required_vars = ['OPENAI_API_KEY', 'BREVO_API_KEY']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå Variables de entorno faltantes:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\nüí° Configura tu archivo .env basado en .env.production.example")
        return False
    
    print("‚úÖ Variables de entorno configuradas correctamente")
    return True

def test_local():
    """Prueba la aplicaci√≥n localmente"""
    print("üß™ Probando aplicaci√≥n localmente...")
    try:
        # Importar y verificar que no hay errores
        from app.agents.unified_agent import UnifiedAgent
        
        agent = UnifiedAgent(
            openai_api_key=os.getenv("OPENAI_API_KEY"),
            db_path="prospects_production.db"
        )
        
        print("‚úÖ Aplicaci√≥n funciona correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en la aplicaci√≥n: {e}")
        return False

def deploy_options():
    """Muestra opciones de despliegue"""
    print("\nüöÄ OPCIONES DE DESPLIEGUE:")
    print("\n1. ü§ó HUGGING FACE SPACES (Gratis, f√°cil)")
    print("   - Sube tu c√≥digo a GitHub")
    print("   - Crea un Space en https://huggingface.co/spaces")
    print("   - Conecta con tu repo GitHub")
    print("   - Configura las variables de entorno en Settings")
    
    print("\n2. üöÑ RAILWAY (Recomendado para producci√≥n)")
    print("   - Registrate en https://railway.app")
    print("   - railway login")
    print("   - railway link")
    print("   - railway up")
    
    print("\n3. ‚òÅÔ∏è GOOGLE CLOUD RUN")
    print("   - gcloud builds submit --tag gcr.io/[PROJECT_ID]/agent")
    print("   - gcloud run deploy --image gcr.io/[PROJECT_ID]/agent")
    
    print("\n4. üê≥ DOCKER LOCAL")
    print("   - docker build -t agent-lucas .")
    print("   - docker run -p 7860:7860 --env-file .env agent-lucas")

def main():
    print("ü§ñ DESPLIEGUE DEL AGENTE INTELIGENTE DE LUCAS BENITES")
    print("=" * 60)
    
    # Verificaciones previas
    if not check_requirements():
        sys.exit(1)
        
    if not check_env_vars():
        sys.exit(1)
        
    if not test_local():
        sys.exit(1)
    
    # Mostrar opciones
    deploy_options()
    
    print("\n‚úÖ Sistema listo para desplegar!")
    print("üìñ Consulta la documentaci√≥n espec√≠fica de cada plataforma")

if __name__ == "__main__":
    main()