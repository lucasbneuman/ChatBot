# agents/app/nodes/message_parser.py
from typing import Dict, Any, List
from langchain_openai import ChatOpenAI
from langchain.schema import HumanMessage, AIMessage, SystemMessage
import re
import json

class MessageParser:
    def __init__(self, llm: ChatOpenAI):
        self.llm = llm
    
    def classify_intent(self, message: str, conversation_history: List[Dict]) -> str:
        """Clasifica la intenci√≥n del mensaje"""
        
        system_prompt = """
        Eres un experto en clasificaci√≥n de intenciones para prospecci√≥n de ventas de servicios de IA..
        Trabajas para Lucas Benites, experto en implementaci√≥n de IA para PyMEs.
        
        Clasifica el mensaje del usuario en una de estas categor√≠as:
        
        - GREETING: Saludos iniciales
        - INFORMATION: Proporciona informaci√≥n sobre su empresa o necesidades de IA
        - INTEREST: Muestra inter√©s en automatizaci√≥n/IA/chatbots
        - OBJECTION: Pone objeciones o dudas sobre IA
        - REJECTION: Rechaza expl√≠citamente
        - SCHEDULING: Quiere agendar una consulta con Lucas
        - NOTES: Informaci√≥n adicional despu√©s de enviar link de reuni√≥n
        - CLOSING: Finaliza la conversaci√≥n
        
        Responde solo con la categor√≠a en may√∫sculas.
        """
        
        context = "\n".join([f"{msg['sender']}: {msg['message']}" for msg in conversation_history[-5:]])
        
        messages = [
            SystemMessage(content=system_prompt),
            HumanMessage(content=f"Contexto:\n{context}\n\nMensaje actual: {message}")
        ]
        
        try:
            response = self.llm.invoke(messages)
            return response.content.strip().upper()
        except:
            return "INFORMATION"  # Default fallback
    
    def extract_entities(self, message: str, conversation_context: str = "") -> Dict[str, Any]:
        """Extrae entidades del mensaje con m√∫ltiples m√©todos"""
        
        # M√©todo 1: Extracci√≥n con LLM mejorada
        llm_extracted = self._extract_with_llm(message, conversation_context)
        
        # M√©todo 2: Extracci√≥n con regex como respaldo
        regex_extracted = self._extract_with_regex(message)
        
        # M√©todo 3: Extracci√≥n por palabras clave
        keyword_extracted = self._extract_with_keywords(message)
        
        # Combinar todos los m√©todos (prioridad: LLM > regex > keywords)
        final_result = {}
        
        # Empezar con keywords (m√°s b√°sico)
        final_result.update(keyword_extracted)
        
        # Sobrescribir con regex (m√°s espec√≠fico)
        for key, value in regex_extracted.items():
            if value:
                final_result[key] = value
        
        # Sobrescribir con LLM (m√°s inteligente)
        for key, value in llm_extracted.items():
            if value:
                final_result[key] = value
        
        # Debug: Imprimir lo que se extrajo
        print(f"üîç DEBUG - Mensaje: {message}")
        print(f"üìä DEBUG - Extra√≠do: {final_result}")
        
        return final_result
    
    def _extract_with_llm(self, message: str, context: str) -> Dict[str, Any]:
        """Extracci√≥n con LLM mejorada"""
        
        system_prompt = """
        Eres un experto extractor de informaci√≥n. Analiza el mensaje y extrae TODA la informaci√≥n posible.
        
        REGLAS CR√çTICAS:
        1. Si dice "Soy [nombre]" ‚Üí name: "[nombre]"
        2. Si menciona "empresa de [tipo]" ‚Üí industry: "[tipo]", company: "Empresa de [tipo]"
        3. Si dice "mi empresa" o "mi negocio" ‚Üí inferir company y/o industry
        4. Si menciona problemas ‚Üí pain_points: ["problema"]
        5. Si quiere chatbot/automatizaci√≥n ‚Üí needs: "automatizaci√≥n"
        6. Si menciona WhatsApp/Instagram ‚Üí notes: "Canal: [plataforma]"
        
        EJEMPLOS ESPEC√çFICOS:
        - "Soy Agust√≠n" ‚Üí {"name": "Agust√≠n"}
        - "empresa de autopartes" ‚Üí {"industry": "autopartes", "company": "Empresa de autopartes"}
        - "chatbot en whatsapp" ‚Üí {"needs": "chatbot WhatsApp", "notes": "Canal: WhatsApp"}
        - "me preguntan por precios" ‚Üí {"pain_points": ["consultas repetitivas de precios"]}
        
        Devuelve JSON v√°lido. NO uses null, usa cadenas vac√≠as o arrays vac√≠os.
        
        {
            "name": "",
            "company": "",
            "industry": "",
            "budget": "",
            "location": "",
            "pain_points": [],
            "needs": "",
            "notes": "",
            "decision_maker": false
        }
        """
        
        full_context = f"Contexto: {context}\n\nMensaje a analizar: {message}"
        
        messages = [
            SystemMessage(content=system_prompt),
            HumanMessage(content=full_context)
        ]
        
        try:
            response = self.llm.invoke(messages)
            result = json.loads(response.content)
            
            # Limpiar valores vac√≠os y convertir a formato esperado
            cleaned_result = {}
            for key, value in result.items():
                if value and value != "" and value != []:
                    if key == "decision_maker" and isinstance(value, bool):
                        cleaned_result[key] = value
                    elif isinstance(value, list) and len(value) > 0:
                        cleaned_result[key] = value
                    elif isinstance(value, str) and value.strip():
                        cleaned_result[key] = value.strip()
            
            return cleaned_result
            
        except Exception as e:
            print(f"Error en LLM extraction: {e}")
            return {}
    
    def _extract_with_regex(self, message: str) -> Dict[str, Any]:
        """Extracci√≥n con regex espec√≠ficos - ARREGLADO"""
        result = {}
        
        # Patrones para nombres - M√ÅS ESTRICTOS
        name_patterns = [
            r'(?:soy|me\s+llamo|mi\s+nombre\s+es)\s+([A-Z][a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë]{2,})',  # Min 3 chars
            r'(?:soy|me\s+llamo)\s+([A-Z][a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë]{2,})(?:\s|,|\.|\s+y\s|\s+de\s)',  # Seguido de separador
        ]
        
        # NO extraer nombres de palabras sueltas como "cual", "que", etc.
        excluded_words = ['cual', 'que', 'como', 'donde', 'cuando', 'porque', 'para', 'por', 'con', 'sin', 'sobre', 'bajo', 'ante', 'desde', 'hasta', 'hacia', 'seg√∫n', 'durante', 'mediante', 'entre', 'dentro', 'fuera', 'adem√°s', 'tambi√©n', 'solo', 'otra', 'otro', 'esta', 'este', 'esa', 'ese', 'aquella', 'aquel', 'toda', 'todo', 'algunas', 'algunos', 'muchas', 'muchos', 'pocas', 'pocos', 'm√°s', 'menos', 'mejor', 'peor', 'mayor', 'menor', 'primera', 'primer', 'segunda', 'segundo', 'tercera', 'tercer', '√∫ltima', '√∫ltimo', 'siguiente', 'anterior', 'nueva', 'nuevo', 'vieja', 'viejo', 'grande', 'peque√±a', 'peque√±o', 'buena', 'bueno', 'mala', 'malo', 'alta', 'alto', 'baja', 'bajo', 'larga', 'largo', 'corta', 'corto', 'f√°cil', 'dif√≠cil', 'importante', 'necesaria', 'necesario', 'posible', 'imposible', 'segura', 'seguro', 'peligrosa', 'peligroso', 'clara', 'claro', 'oscura', 'oscuro', 'r√°pida', 'r√°pido', 'lenta', 'lento', 'fuerte', 'd√©bil', 'rica', 'rico', 'pobre', 'feliz', 'triste', 'alegre', 'enojada', 'enojado', 'cansada', 'cansado', 'aburrida', 'aburrido', 'interesante', 'divertida', 'divertido', 'seria', 'serio', 'joven', 'vieja', 'viejo', 'casada', 'casado', 'soltera', 'soltero', 'trabajadora', 'trabajador', 'estudiante', 'profesor', 'profesora', 'doctor', 'doctora', 'ingeniero', 'ingeniera', 'abogado', 'abogada', 'artista', 'escritor', 'escritora', 'm√∫sico', 'm√∫sica', 'cantante', 'actor', 'actriz', 'deportista', 'cocinero', 'cocinera', 'vendedor', 'vendedora', 'comprador', 'compradora', 'cliente', 'jefe', 'jefa', 'empleado', 'empleada', 'trabajador', 'trabajadora', 'due√±o', 'due√±a', 'propietario', 'propietaria', 'socio', 'socia', 'amigo', 'amiga', 'hermano', 'hermana', 'primo', 'prima', 't√≠o', 't√≠a', 'abuelo', 'abuela', 'padre', 'madre', 'hijo', 'hija', 'nieto', 'nieta', 'esposo', 'esposa', 'novio', 'novia', 'vecino', 'vecina', 'conocido', 'conocida', 'extra√±o', 'extra√±a', 'persona', 'gente', 'hombre', 'mujer', 'ni√±o', 'ni√±a', 'beb√©', 'adulto', 'adulta', 'anciano', 'anciana', 'joven']
        
        for pattern in name_patterns:
            match = re.search(pattern, message, re.IGNORECASE)
            if match:
                potential_name = match.group(1).strip()
                # Verificar que no sea una palabra excluida
                if potential_name.lower() not in excluded_words and len(potential_name) > 2:
                    result['name'] = potential_name
                    break
        
        # Patrones para empresa/industria
        business_patterns = [
            r'empresa\s+de\s+([a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+)',
            r'negocio\s+de\s+([a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+)',
            r'venta\s+de\s+([a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+)',
            r'trabajo\s+en\s+([a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+)',
        ]
        
        for pattern in business_patterns:
            match = re.search(pattern, message, re.IGNORECASE)
            if match:
                industry = match.group(1).strip()
                result['industry'] = industry
                result['company'] = f"Empresa de {industry}"
                break
        
        # Patrones para necesidades
        if any(keyword in message.lower() for keyword in ['chatbot', 'bot', 'automatiz', 'responder autom√°tico']):
            result['needs'] = 'chatbot/automatizaci√≥n'
        
        # Patrones para pain points
        pain_indicators = [
            'me preguntan', 'preguntas repetitivas', 'pierdo tiempo', 'mismo mensaje',
            'consultas frecuentes', 'respuestas autom√°ticas'
        ]
        
        pain_points = []
        for indicator in pain_indicators:
            if indicator in message.lower():
                pain_points.append(f"problema: {indicator}")
        
        if pain_points:
            result['pain_points'] = pain_points
        
        # Patrones para plataformas
        platform_patterns = [
            (r'whatsapp|wapp', 'WhatsApp'),
            (r'instagram|ig', 'Instagram'),
            (r'facebook|fb', 'Facebook')
        ]
        
        for pattern, platform in platform_patterns:
            if re.search(pattern, message, re.IGNORECASE):
                result['notes'] = f"Canal preferido: {platform}"
                break
        
        return result
    
    def _extract_with_keywords(self, message: str) -> Dict[str, Any]:
        """Extracci√≥n b√°sica por palabras clave"""
        result = {}
        message_lower = message.lower()
        
        # Industrias comunes
        industries = {
            'autopartes': 'autopartes',
            'auto partes': 'autopartes',
            'repuestos': 'autopartes',
            'e-commerce': 'e-commerce',
            'ecommerce': 'e-commerce',
            'tienda': 'retail',
            'restaurante': 'restaurantes',
            'comida': 'restaurantes',
            'software': 'tecnolog√≠a',
            'tech': 'tecnolog√≠a',
            'consultor√≠a': 'consultor√≠a',
            'asesor√≠a': 'consultor√≠a'
        }
        
        for keyword, industry in industries.items():
            if keyword in message_lower:
                result['industry'] = industry
                if not result.get('company'):
                    result['company'] = f"Empresa de {industry}"
                break
        
        # Necesidades comunes
        needs_keywords = {
            'chatbot': 'chatbot',
            'bot': 'chatbot',
            'automatizaci√≥n': 'automatizaci√≥n',
            'respuestas autom√°ticas': 'automatizaci√≥n',
            'atenci√≥n al cliente': 'customer service'
        }
        
        for keyword, need in needs_keywords.items():
            if keyword in message_lower:
                result['needs'] = need
                break
        
        # Pain points comunes
        if any(word in message_lower for word in ['preguntan', 'consultas', 'tiempo', 'repetitiv']):
            result['pain_points'] = ['consultas repetitivas']
        
        return result